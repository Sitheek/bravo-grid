group 'com.bravostudiodev'
version '2.1-SNAPSHOT'

apply plugin: 'maven'
apply plugin: 'maven-publish' // task publishToMavenLocal
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'application'
mainClassName = 'com.bravostudiodev.selenium.Entry'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'com.google.guava:guava:23.0'
    compile 'io.sterodium:sterodium-rmi:0.3'
    compile 'org.seleniumhq.selenium:jetty-repacked:9.4.5.v20170502'
    compile 'commons-io:commons-io:2.5'
    compile 'org.sikuli:sikuli-api:1.2.0'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10:linux-x86'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10:linux-x86_64'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10:windows-x86'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10:windows-x86_64'
    compile 'org.bytedeco.javacpp-presets:opencv:2.4.10-0.10:macosx-x86_64'

    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-all:1.10.19'
}

sourceSets {
    main {
        output.resourcesDir = sourceSets.main.output.classesDir
    }
    test {
        output.resourcesDir = sourceSets.test.output.classesDir
    }
}

println sourceSets.main.output.resourcesDir
println sourceSets.test.output.resourcesDir

jar {

}

task fulljar(type: Jar) {
    classifier = "deps"
    from configurations.runtime.asFileTree.files.collect { zipTree(it) }
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

task createPom {
    def archiveNameNoExt = jar.archiveName.take(jar.archiveName.lastIndexOf('.'))
    pom {
        project {
            groupId project.group
            artifactId jar.baseName
            version project.version
        }
    }.writeTo(new File(project.buildDir, "libs/" + archiveNameNoExt + ".pom").getCanonicalFile())
}

task releaseZip(type: Zip, dependsOn: createPom) {
    def archiveNameNoExt = jar.archiveName.take(jar.archiveName.lastIndexOf('.'))
    from new File(project.buildDir, "libs/").getCanonicalPath()
    include archiveNameNoExt + ".pom"
    include archiveNameNoExt + ".jar"
    archiveName archiveNameNoExt + '.zip'
    destinationDir(new File(project.buildDir, "libs/"))
}

jar.finalizedBy(fulljar, releaseZip)
